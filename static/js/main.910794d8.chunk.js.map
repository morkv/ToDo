{"version":3,"sources":["actions/index.js","reducers/index.js","todos.js","components/UI/Stats/Stats.js","components/Header/Header.js","containers/HeaderContainer/HeaderContainer.js","components/UI/Checkbox/Checkbox.js","components/UI/Button/Button.js","components/UI/Form/Form.js","components/Todo/Todo.js","components/List/List.js","containers/ListContainer/ListContainer.js","components/UI/Input/Input.js","components/TodoForm/TodoForm.js","containers/FormContainer/FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["nextId","addTodo","title","type","id","deleteTodo","toggleTodo","editTodo","todoReducer","state","arguments","length","undefined","action","completed","Object","assign","reducer","concat","toConsumableArray","index","findIndex","todo","slice","map","todos","Stats","props","uncompleted","filter","react_default","a","createElement","className","statsClass","join","Header","_ref","build","xs","UI_Stats_Stats","HeaderContainer","connect","Checkbox","onClick","onChange","checked","Button","icon","children","Form","formClass","onSubmit","formOnSubmit","Todo","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editing","handleSubmit","bind","assertThisInitialized","handleDelete","handleToggle","handleEdit","prevProps","prevState","refs","focus","event","preventDefault","value","onEdit","setState","onDelete","onToggle","Checkbox_Checkbox","UI_Button_Button","UI_Form_Form","ref","defaultValue","renderForm","renderDisplay","React","Component","List","components_Todo_Todo","key","ListContainer","dispatch","Input","inputClassName","required","inputIsRequired","inputType","placeholder","inputPlaceholder","inputOnChange","inputVal","inputDefaultValue","inputRef","TodoFormForm","store","handleChange","onAdd","target","UI_Input_Input","FormContainer","TodoForm","App","HeaderContainer_HeaderContainer","ListContainer_ListContainer","FormContainer_FormContainer","Boolean","window","location","hostname","match","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.910794d8.chunk.js","sourcesContent":["export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\n\nlet nextId = 3;\n\n\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        id: nextId++,\n        title\n    }\n}\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        id\n    }\n}\n\nexport const toggleTodo = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        id\n    }\n}\n\nexport const editTodo = (id, title) => {\n    return {\n        type: EDIT_TODO,\n        id,\n        title\n    }\n}","import { ADD_TODO, DELETE_TODO, TOGGLE_TODO, EDIT_TODO} from '../actions/index';\n\n// import todoReducer from './todoReducer'\n\n\n\nconst todoReducer = (state={}, action) => {\n    switch(action.type) {\n        case ADD_TODO:\n            return {\n                id: action.id,\n                title: action.title,\n                completed: false\n            }\n        case TOGGLE_TODO:\n            if (state.id !== action.id) {\n                return state;\n            }\n\n            return Object.assign({}, state, {\n                completed: !state.completed\n            });\n        case EDIT_TODO:\n            if (state.id !== action.id) {\n                return state;\n            }\n\n            return Object.assign({}, state, {\n                title: action.title\n            });\n    }\n}\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return  [...state, todoReducer(undefined, action)];\n        case DELETE_TODO:\n            const index = state.findIndex(todo => todo.id === action.id);\n            return [\n                ...state.slice(0, index),\n                ...state.slice(index + 1)\n            ];\n        case TOGGLE_TODO:\n            return state.map(todo => todoReducer(todo, action));\n        case EDIT_TODO:\n            return state.map(todo => todoReducer(todo, action));\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","const todos = [\n    {\n        id: 1,\n        title: 'Add styles & respons.',\n        completed: true\n    },\n    {\n        id: 2,\n        title: 'Add name',\n        completed: false\n    },\n];\n\nexport default todos;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Stats.scss'\n\nfunction Stats(props) {\n    const total = props.todos.length;\n    const completed = props.todos.filter(todo => todo.completed).length;\n    const uncompleted = total - completed;\n\n    return (\n        <table className={['stats', props.statsClass].join(' ')}>\n            <tbody>\n                {/* <tr>\n                    <th>All tasks:</th>\n                    <td>{total}</td>\n                </tr>\n                <tr>\n                    <th>Done:</th>\n                    <td>{completed}</td>\n                </tr> */}\n                <tr>\n                    <th>In Progress:</th>\n                    <td>{uncompleted}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        completed: PropTypes.bool.isRequired\n    })).isRequired\n};\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Col, Row } from 'react-grid-system';\nimport  './Header.scss'\n\nimport Stats from '../UI/Stats/Stats';\n\nconst Header = ({ todos }) => {\n    return (\n        <header className={['header'].join(' ')}>\n            <Container>\n                <Row>\n                    <Col xs={6}>\n                        <h1 className={'header__heading'}>Redux Todo</h1>\n                    </Col>\n                    <Col xs={6}>\n                        <Stats \n                            todos={todos}\n                            statsClass={['header__stats']}/>\n                    </Col>\n                </Row>\n            </Container>\n        </header>\n    );\n}\n\nHeader.propTypes = {\n    todos: PropTypes.array.isRequired\n};\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Header from '../../components/Header/Header';\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        todos: state\n    }\n}\n\nconst HeaderContainer = connect(mapStateToProps, null)(Header);\n\nexport default HeaderContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Checkbox(props) {\n    return (\n        <button className=\"btn btn--checkbox btn--icon\" onClick={props.onChange}>\n            <i className=\"material-icons\">\n                {props.checked ? 'check_box' : 'check_box_outline_blank'}\n            </i>\n        </button>\n    );\n}\n\nCheckbox.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default Checkbox;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Button.scss';\n\nfunction Button(props) {\n    return (\n        <button \n            onClick={props.onClick} \n            {...props}>\n\n            {props.icon\n                ? <i className=\"material-icons\">{props.icon}</i>\n                : props.children\n            }\n        </button>\n    );\n}\n\nButton.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    icon: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nexport default Button;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Form.scss';\n\n\nconst Form = (props) => (\n    <form\n        className={['form', [props.formClass]].join(' ')}\n        onSubmit={props.formOnSubmit}\n    >\n        {props.children}\n    </form>\n\n)\n\nForm.propTypes = {\n    formOnSubmit: PropTypes.func\n}\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Todo.scss'\n\nimport Checkbox from '../UI/Checkbox/Checkbox';\nimport Button from '../UI/Button/Button';\nimport Form from '../UI/Form/Form';\n\nclass Todo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editing: false\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.editing) {\n            this.refs.title.focus();\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const title = this.refs.title.value;\n        \n        this.props.onEdit(this.props.id, title);\n        this.setState({ editing: false });\n    }\n\n    handleDelete() {\n        this.props.onDelete(this.props.id);\n    }\n\n    handleToggle() {\n        this.props.onToggle(this.props.id);\n    }\n\n    handleEdit() {\n        this.setState({ editing: true });\n    }\n\n    renderDisplay() {\n        const className = `todo${this.props.completed ? ' completed' : ''}`;\n\n        return (\n            <div className={className}>\n                <Checkbox checked={this.props.completed} onChange={this.handleToggle} />\n\n                <span className='todo__title'>{this.props.title}</span>\n\n                <div className='todo__mod'>\n                    <Button className=\"btn btn--edit btn--icon\" icon=\"edit\" onClick={this.handleEdit} />\n                    <Button className=\"btn btn--delete btn--icon\" icon=\"delete\" onClick={this.handleDelete} />\n                </div>\n            </div>\n        );\n    }\n\n    renderForm() {\n        return (\n            <Form formClass={'todo-edit-form'} formOnSubmit={this.handleSubmit}>\n                <input type=\"text\" ref=\"title\" defaultValue={this.props.title} />\n                <Button className=\"btn btn--save btn--icon\" icon=\"save\" type=\"submit\" />\n            </Form>\n        );\n    }\n\n    render() {\n        return this.state.editing ? this.renderForm() : this.renderDisplay();\n    }\n}\n\nTodo.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired\n};\n\nexport default Todo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Col, Row } from 'react-grid-system';\nimport Todo from '../Todo/Todo';\n\nfunction List(props) {\n\n    return (\n        <section className={['section', 'todo-list'].join(' ')}>\n            <Container>\n\n                {props.todos.map(todo =>\n                    <Todo\n                        key={todo.id}\n                        id={todo.id}\n                        title={todo.title}\n                        completed={todo.completed}\n                        onDelete={props.onDelete}\n                        onToggle={props.onToggle}\n                        onEdit={props.onEdit}\n                    />)\n                }\n            </Container>\n        </section>\n    );\n}\n\nList.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        completed: PropTypes.bool.isRequired\n    })).isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired\n};\n\nexport default List;","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport List from '../../components/List/List';\n\nimport { deleteTodo, toggleTodo, editTodo } from '../../actions/index';\n\n\nfunction mapStateToProps(state) {\n    return {\n        todos: state\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onDelete: id => dispatch(deleteTodo(id)),\n        onToggle: id => dispatch(toggleTodo(id)),\n        onEdit: (id, title) => dispatch(editTodo(id, title))\n    }\n}\n\nconst ListContainer = connect(mapStateToProps, mapDispatchToProps)(List);\n\nexport default ListContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Input.scss';\n\n\nconst Input = (props) => (\n    <input\n        // className={[classes.input, classes[props.inputClass]].join(' ')}\n        className={props.inputClassName}\n        required={props.inputIsRequired}\n        type={props.inputType} \n        placeholder={props.inputPlaceholder}\n        onChange={props.inputOnChange}\n        value={props.inputVal}\n        defaultValue={props.inputDefaultValue}\n        ref={props.inputRef}\n    />\n)\n\nInput.propTypes = {\n    inputIsRequired: PropTypes.bool,\n    inputPlaceholder: PropTypes.string,\n    inputValue: PropTypes.string,\n    inputName: PropTypes.string\n}\n\nexport default Input;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Col, Row } from 'react-grid-system';\n\nimport './TodoForm.scss';\nimport Button from '../UI/Button/Button';\nimport Form from '../UI/Form/Form';\nimport Input from '../UI/Input/Input';\n\n\nclass TodoFormForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: ''\n        };\n\n        this.store = this.props.store\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const title = this.state.title;\n\n        if (title) {\n            this.props.onAdd(title);\n            this.setState({ title: '' });\n        }\n    }\n\n    handleChange(event) {\n        const title = event.target.value;\n\n        this.setState({ title });\n    }\n\n    render() {\n        return (\n            <section className={['section'].join(' ')}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Form formClass={'todo-add-form'} formOnSubmit={this.handleSubmit}>\n                                <Input\n                                    inputClassName={'input'}\n                                    inputIsRequired={true}\n                                    inputType={'text'}\n                                    inputVal={this.state.title}\n                                    inputPlaceholder={'Enter ToDo Title'}\n                                    inputOnChange={this.handleChange}\n                                />\n                                <Button type=\"submit\">Add</Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </section> \n        );\n    }\n}\n\nTodoFormForm.propTypes = {\n    onAdd: PropTypes.func.isRequired\n};\n\nexport default TodoFormForm;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport TodoForm from '../../components/TodoForm/TodoForm';\n\nimport { addTodo } from '../../actions/index';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onAdd: title => dispatch(addTodo(title)),\n        \n    }\n}\n\nconst FormContainer = connect(null, mapDispatchToProps)(TodoForm);\n\nexport default FormContainer;\n\n","import React, { Component } from 'react';\n\n// import Aux from './hoc/Aux';\n\nimport HeaderContainer from './containers/HeaderContainer/HeaderContainer';\nimport ListContainer from './containers/ListContainer/ListContainer';\nimport FormContainer from './containers/FormContainer/FormContainer';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <main>\n                <HeaderContainer/>\n                <ListContainer/>\n                <FormContainer/>\n            </main>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducer from './reducers/index';\n\nimport todos from './todos';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nlet store = createStore(reducer, todos);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}